---
import SunIcon from "./icons/Sun.astro"
import MoonIcon from "./icons/Moon.astro"
import SystemIcon from "./icons/System.astro"

const THEMES = ["Light", "Dark", "System"]
---

<div class="relative ml-1 mr-1">
  <button
    id="theme-toggle-btn"
    class="appearance-none border-none flex hover:scale-125 transition"
  >
    <span class="sr-only">Elige el tema</span>
    <SunIcon id="light" class="theme-toggle-icon size-5 transition-all" />
    <MoonIcon
      id="dark"
      class="theme-toggle-icon absolute size-5 transition-all"
    />
    <SystemIcon
      id="system"
      class="theme-toggle-icon absolute size-5 transition-all"
    />
  </button>
  <div
    id="themes-menu"
    class="absolute opacity-0 scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/70 dark:bg-gray-900/70 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
  >
    <ul>
      {
        THEMES.map((theme) => (
          <li class="themes-menu-option px-2 py-1.5 cursor-default hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm">
            {theme}
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  #themes-menu.open {
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }
    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>

<script is:inline>
  // Variables globales para manejo de estado
  window.themeToggleState = window.themeToggleState || {
    initialized: false,
    clickHandler: null,
    mediaQueryListener: null,
    lastThemeChange: 0
  };

  function cleanupThemeToggle() {
    const state = window.themeToggleState;
    
    // Limpiar event listeners existentes
    if (state.clickHandler) {
      document.removeEventListener("click", state.clickHandler);
      state.clickHandler = null;
    }
    
    if (state.mediaQueryListener) {
      const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");
      matchMedia.removeEventListener("change", state.mediaQueryListener);
      state.mediaQueryListener = null;
    }
    
    console.log('🧹 Theme toggle cleanup completed');
  }

  function initThemeToggle() {
    const state = window.themeToggleState;
    const now = Date.now();
    
    // Evitar reinicialización muy frecuente (menos de 50ms)
    if (state.initialized && (now - state.lastThemeChange) < 50) {
      console.log('⏰ Skipping reinit - too frequent');
      return;
    }
    
    console.log('🎨 Initializing theme toggle...');
    
    // Limpiar estado anterior
    cleanupThemeToggle();
    
    const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");

    const getThemePreference = () => {
      if (typeof localStorage !== "undefined") {
        const stored = localStorage.getItem("theme");
        console.log('📦 Stored theme:', stored);
        return stored || "system";
      }
      return "system";
    }

    const updateIcon = (themePreference) => {
      // Buscar iconos cada vez para asegurar que existan en la nueva página
      const icons = document.querySelectorAll(".theme-toggle-icon");
      console.log(`🔍 Found ${icons.length} theme icons`);
      
      icons.forEach((element) => {
        if (element && element.id) {
          element.style.scale = element.id === themePreference ? "1" : "0";
        }
      });
    }

    const applyTheme = (isDark) => {
      console.log('🔄 Applying theme:', isDark ? 'dark' : 'light');
      document.documentElement.classList.toggle("dark", isDark);
    }

    const updateTheme = (forceUpdate = false) => {
      try {
        // Limpiar listener anterior
        if (state.mediaQueryListener) {
          matchMedia.removeEventListener("change", state.mediaQueryListener);
          state.mediaQueryListener = null;
        }

        const themePreference = getThemePreference();
        console.log('🎯 Current theme preference:', themePreference);
        
        let isDark = false;
        
        switch (themePreference) {
          case "dark":
            isDark = true;
            break;
          case "light":
            isDark = false;
            break;
          case "system":
          default:
            isDark = matchMedia.matches;
            // Recrear listener para system theme
            state.mediaQueryListener = (e) => {
              console.log('🔄 System theme changed:', e.matches);
              applyTheme(e.matches);
            };
            matchMedia.addEventListener("change", state.mediaQueryListener);
            break;
        }

        updateIcon(themePreference);
        applyTheme(isDark);
        
        if (forceUpdate) {
          state.lastThemeChange = Date.now();
        }
        
      } catch (error) {
        console.error('❌ Error updating theme:', error);
      }
    }

    const setupClickHandlers = () => {
      state.clickHandler = (e) => {
        // Verificar que los elementos existan en el momento del clic
        const themeToggleBtn = document.getElementById("theme-toggle-btn");
        const themesMenu = document.getElementById("themes-menu");
        
        // Toggle del menú
        if (e.target.closest("#theme-toggle-btn")) {
          e.stopPropagation();
          if (themesMenu) {
            const isOpen = themesMenu.classList.contains("open");
            themesMenu.classList.toggle("open", !isOpen);
            console.log('🔄 Menu toggled:', !isOpen);
          } else {
            console.warn('⚠️ Themes menu not found');
          }
          return;
        }
        
        // Selección de tema
        const themeOption = e.target.closest(".themes-menu-option");
        if (themeOption) {
          const newTheme = themeOption.innerText.toLowerCase().trim();
          console.log('🎨 Theme selected:', newTheme);
          
          try {
            localStorage.setItem("theme", newTheme);
            
            // Pequeño delay para asegurar que el localStorage se guarde
            setTimeout(() => {
              updateTheme(true);
              
              // Cerrar menú
              if (themesMenu) {
                themesMenu.classList.remove("open");
              }
            }, 10);
            
          } catch (error) {
            console.error('❌ Error setting theme:', error);
          }
          return;
        }
        
        // Cerrar menú si se hace clic fuera
        if (themesMenu && !e.target.closest("#themes-menu")) {
          themesMenu.classList.remove("open");
        }
      };
      
      document.addEventListener("click", state.clickHandler);
      console.log('👆 Click handlers attached');
    };

    // Inicializar
    updateTheme();
    setupClickHandlers();
    
    state.initialized = true;
    console.log('✅ Theme toggle initialized successfully');
  }

  // Función de reinicialización más robusta
  function forceReinitThemeToggle() {
    console.log('🔄 Force reinitializing theme toggle...');
    window.themeToggleState.initialized = false;
    
    // Limpiar completamente
    cleanupThemeToggle();
    
    // Reinicializar después de un pequeño delay
    setTimeout(() => {
      initThemeToggle();
    }, 20);
  }

  // Inicialización inicial
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initThemeToggle);
  } else {
    initThemeToggle();
  }

  // Manejo robusto de navegación SPA
  document.addEventListener('astro:page-load', () => {
    console.log('🚀 Astro page load detected');
    forceReinitThemeToggle();
  });

  document.addEventListener('astro:after-swap', () => {
    console.log('🔄 Astro after swap detected');
    forceReinitThemeToggle();
  });

  // Manejo adicional para el caso específico reportado
  document.addEventListener('astro:before-preparation', () => {
    console.log('📝 Astro before preparation - cleaning up');
    cleanupThemeToggle();
  });

  // Backup: Reinicializar si no hay elementos de tema después de 200ms
  document.addEventListener('astro:page-load', () => {
    setTimeout(() => {
      const toggleBtn = document.getElementById("theme-toggle-btn");
      const icons = document.querySelectorAll(".theme-toggle-icon");
      
      if (!toggleBtn || icons.length === 0) {
        console.log('🔧 Backup: Theme elements not found, reinitializing...');
        forceReinitThemeToggle();
      }
    }, 200);
  });
</script>
